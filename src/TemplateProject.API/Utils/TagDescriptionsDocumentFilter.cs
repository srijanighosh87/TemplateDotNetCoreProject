using System.Reflection;
using System.Xml;
using System.Xml.XPath;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace TemplateProject.API.Utils;

/// <summary>
/// Document filter to add descriptions to Swagger tags based on XML documentation comments.
/// </summary>
public class TagDescriptionsDocumentFilter : IDocumentFilter
{
  private readonly string _xmlPath;

  /// <summary>
  /// Initializes a new instance of the <see cref="TagDescriptionsDocumentFilter"/> class.
  /// </summary>
  /// <param name="xmlPath">The file path to the XML documentation file generated by the compiler.</param>
  public TagDescriptionsDocumentFilter(string xmlPath)
  {
    _xmlPath = xmlPath;
  }

  /// <summary>
  /// Applies the document filter to the Swagger document
  /// adding descriptions to tags based on XML documentation comments.
  /// </summary>
  /// <param name="swaggerDoc">The OpenAPI document to modify.</param>
  /// <param name="context">The filter context containing metadata about the API.</param>
  public void Apply(OpenApiDocument swaggerDoc, DocumentFilterContext context)
  {
    var settings = new XmlReaderSettings
    {
      DtdProcessing = DtdProcessing.Prohibit, // Disable DTD processing for security
      XmlResolver = null, // Prevent potential information disclosure
    };

    using (var reader = XmlReader.Create(_xmlPath, settings))
    {
      var xmlDoc = new XPathDocument(reader);
      var navigator = xmlDoc.CreateNavigator();

      // Get all controller types in the current assembly
      var controllerTypes = Assembly.GetExecutingAssembly()
          .GetTypes()
          .Where(t => t.IsSubclassOf(typeof(Microsoft.AspNetCore.Mvc.ControllerBase)) &&
                      t.Name.EndsWith("Controller", StringComparison.OrdinalIgnoreCase))
          .ToList();

      if (controllerTypes.Count == 0)
      {
        // No controllers found, exit early
        return;
      }

      // If tags are empty, add them for all controllers
      if (swaggerDoc.Tags.Count == 0)
      {
        foreach (var controllerType in controllerTypes)
        {
          var tagName = controllerType.Name.Replace("Controller", "", StringComparison.OrdinalIgnoreCase);
          swaggerDoc.Tags.Add(new OpenApiTag { Name = tagName });
        }
      }

      // Now iterate and set descriptions only for controller-based tags
      foreach (var tag in swaggerDoc.Tags)
      {
        // Check if this tag corresponds to a controller
        var controllerType = controllerTypes
            .FirstOrDefault(t => t.Name.Equals($"{tag.Name}Controller", StringComparison.OrdinalIgnoreCase));

        if (controllerType != null)
        {
          string commentId = $"T:{controllerType.FullName}";
          var node = navigator.SelectSingleNode($"/doc/members/member[@name='{commentId}']/summary");
          if (node != null)
          {
            tag.Description = node.InnerXml.Trim();
          }
        }
      }
    }
  }
}
